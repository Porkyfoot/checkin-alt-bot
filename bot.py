import os
import logging
from datetime import datetime, timedelta, time as dt_time

import gspread
from oauth2client.service_account import ServiceAccountCredentials

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# === –ö–û–ù–§–ò–ì ===
TOKEN = os.environ['TOKEN']
SPREADSHEET_NAME = 'checkin-alt-bot'
TIMEZONE_OFFSET = 5  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

# === Google Sheets ===
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "/etc/secrets/credentials.json", scope
)
client = gspread.authorize(creds)
att_sheet = client.open(SPREADSHEET_NAME).worksheet('Status')
emp_sheet = client.open(SPREADSHEET_NAME).worksheet('Employees')

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ===
(
    NEW_USER,        # –≤–≤–æ–¥–∏–º –§–ò–û
    CHOOSING_STATUS, # –≤—ã–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç –º–µ–Ω—é
    TYPING_TIME,     # –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    TYPING_REASON    # –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã
) = range(4)

user_data = {}  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO
)

def get_today_date() -> str:
    return (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).strftime('%d.%m.%Y')

# --- –®–∞–≥ 1: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å:\n–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–Ω–∞ —Ä—É—Å—Å–∫–æ–º):",
        reply_markup=ReplyKeyboardRemove()
    )
    return NEW_USER

async def new_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    chat_id = update.message.chat_id

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –∏ telegram_id
    emp_sheet.append_row([text, chat_id])
    user_data[chat_id] = {'name': text}

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ'],
        ['üè† –£–¥–∞–ª—ë–Ω–Ω–æ', 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö'],
        ['üå¥ –í –æ—Ç–ø—É—Å–∫–µ'],
        ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤']
    ]
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {text}! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return CHOOSING_STATUS

# --- –®–∞–≥ 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç—É—Å ---
async def status_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = update.message.text
    chat_id = update.message.chat_id
    user_data[chat_id]['status'] = status

    if status == 'üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
        return await send_overview(update, context)

    if status == 'üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ':
        # —Å—Ä–∞–∑—É —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        return await save_and_finish(update, time_str=get_today_date())

    if status == 'üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.07‚Äì09.07):")
        return TYPING_REASON

    # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è/–ø—Ä–∏—á–∏–Ω—É
    prompt = "–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –Ω–∞ —Å–≤—è–∑–∏ –∏–ª–∏ –≤ –æ—Ñ–∏—Å–µ?" if status in ('üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö', 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ') else ""
    await update.message.reply_text(prompt)
    return TYPING_TIME

# –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
async def received_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_data[chat_id]['time'] = update.message.text.strip()
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É (–∏–ª–∏ ¬´–Ω–µ—Ç¬ª)") 
    return TYPING_REASON

# –≤–≤–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ—Ç–ø—É—Å–∫–∞
async def received_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_data[chat_id]['reason'] = update.message.text.strip()
    return await save_and_finish(update)

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
async def save_and_finish(
    update: Update,
    time_str: str = None
) -> int:
    chat_id = update.message.chat_id
    data = user_data[chat_id]
    today = get_today_date()

    # –µ—Å–ª–∏ time_str —è–≤–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä—ë–º –∏–∑ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ
    t = time_str or data.get('time', '')
    reason = data.get('reason', '')

    row = [
        today,
        data['name'],
        str(chat_id),
        data['status'],
        t,
        reason,
        ''
    ]
    att_sheet.append_row(row)

    await update.message.reply_text(
        "‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
async def send_overview(update: Update, context: ContextTypes.DEFAULT_TYPE):
    records = att_sheet.get_all_records()
    today = get_today_date()
    lines = []
    for idx, r in enumerate(records, start=1):
        if r['–î–∞—Ç–∞'] == today:
            name = r['–ò–º—è']
            st   = r['–°—Ç–∞—Ç—É—Å']
            tm   = r.get('–í—Ä–µ–º—è', '')
            rsn  = r.get('–ü—Ä–∏—á–∏–Ω–∞', '')
            suffix = f"({rsn or tm})" if (rsn or tm) else ""
            lines.append(f"{idx}. {name} ‚Äî {st} {suffix}")
    text = "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(lines) if lines else "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å."
    await update.message.reply_text(text, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 9:30 –ø–æ –±—É–¥–Ω—è–º ---
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    today = get_today_date()
    # —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–º–µ—Ç–∏–≤—à–∏—Ö—Å—è
    done = {
        r['Telegram ID']
        for r in att_sheet.get_all_records()
        if r['–î–∞—Ç–∞'] == today
    }
    # –≤—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    emps = emp_sheet.get_all_records()
    for r in emps:
        tid = str(r['Telegram ID'])
        if tid not in done:
            await context.bot.send_message(
                chat_id=int(tid),
                text="‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
            )

def main():
    logging.getLogger().setLevel(logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NEW_USER:        [MessageHandler(filters.TEXT & ~filters.COMMAND, new_user)],
            CHOOSING_STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, status_chosen)],
            TYPING_TIME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, received_time)],
            TYPING_REASON:   [MessageHandler(filters.TEXT & ~filters.COMMAND, received_reason)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)

    # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞ –±—É–¥–Ω–∏ (–ø–æ–Ω-–ø—è—Ç) –≤ 09:30
    jq = app.job_queue
    jq.run_daily(send_reminder, dt_time(hour=9, minute=30), days=(0,1,2,3,4))

    app.run_polling()

if __name__ == '__main__':
    main()
