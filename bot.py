import os
import logging
import gspread
from datetime import datetime, timedelta
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# CONFIG
TOKEN = os.environ["TOKEN"]
SPREADSHEET_NAME = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –û—Ç–º–µ—Ç–∫–∏"
TIMEZONE_OFFSET = 5

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

# States
CHOOSING_STATUS, TYPING_TIME, TYPING_REASON = range(3)
user_data_temp = {}

# Logging
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

def get_today_date():
    return (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).strftime("%d.%m.%Y")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...", reply_markup=ReplyKeyboardRemove())

    keyboard = [
        ["üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ"],
        ["üè† –£–¥–∞–ª—ë–Ω–Ω–æ", "üé¨ –ù–∞ —Å—ä—ë–º–∫–∞—Ö"],
        ["üå¥ –í –æ—Ç–ø—É—Å–∫–µ"],
        ["üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"]
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ì–¥–µ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å?", reply_markup=markup)
    return CHOOSING_STATUS

async def status_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    name = update.message.from_user.full_name

    if text == "üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤":
        await send_sheet_data(update)
        return ConversationHandler.END

    user_data_temp[user_id] = {
        "name": name,
        "status": text,
        "telegram_id": user_id
    }

    if text == "üå¥ –í –æ—Ç–ø—É—Å–∫–µ":
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 11.07‚Äì20.07)")
        return TYPING_REASON

    elif text == "üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ":
        return await save_and_thank(update, user_id, "")

    else:
        await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—à—å –Ω–∞ —Å–≤—è–∑–∏ –∏–ª–∏ –≤ –æ—Ñ–∏—Å–µ?")
        return TYPING_TIME

async def received_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data_temp[user_id]["time"] = update.message.text
    await update.message.reply_text("–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ ‚Äî –Ω–∞–ø–∏—à–∏. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'")
    return TYPING_REASON

async def received_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    reason = update.message.text
    return await save_and_thank(update, user_id, reason)

async def save_and_thank(update, user_id, reason):
    data = user_data_temp[user_id]
    today = get_today_date()
    row = [
        today,
        data["name"],
        str(data["telegram_id"]),
        data["status"],
        data.get("time", ""),
        reason,
        ""
    ]
    sheet.append_row(row)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
    return ConversationHandler.END

async def send_sheet_data(update: Update):
    try:
        records = sheet.get_all_records()
        today = get_today_date()
        text = "üìã –°–µ–≥–æ–¥–Ω—è –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å:\n\n"
        count = 0
        for row in records:
            if row.get("–î–∞—Ç–∞") == today:
                name = row.get("–ò–º—è", "‚Äî")
                status = row.get("–°—Ç–∞—Ç—É—Å", "")
                time = row.get("–í—Ä–µ–º—è", "")
                text += f"‚Ä¢ {name} ‚Äî {status} ({time})\n"
                count += 1
        if count == 0:
            text = "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è."
        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, status_chosen)],
            TYPING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_time)],
            TYPING_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_reason)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()

if __name__ == "__main__":
    main()
