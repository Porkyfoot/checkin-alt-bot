#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import re
from datetime import datetime, date, time as dtime

import gspread
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò GOOGLE SHEETS ======
gc = gspread.service_account(filename="/etc/secrets/credentials.json")
SPREADSHEET_ID = os.environ["SPREADSHEET_ID"]
EMP_SHEET_NAME  = "Employees"
STAT_SHEET_NAME = "Status"

emp_ws   = gc.open_by_key(SPREADSHEET_ID).worksheet(EMP_SHEET_NAME)
stat_ws  = gc.open_by_key(SPREADSHEET_ID).worksheet(STAT_SHEET_NAME)

# ====== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ====== –°–¢–ï–ô–¢–´ ======
CHOOSING, REMOTE, SHOOT, VAC = range(4)

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–ê ======
kb = [
    ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ'],
    ['üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö',    'üå¥ –í –æ—Ç–ø—É—Å–∫–µ'],
    ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', 'DayOff'],
]
markup = ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True)

# ====== –£–¢–ò–õ–ò–¢–´ ======
def record_employee(name: str, tg_id: int):
    recs = emp_ws.get_all_records()
    ids  = {int(r["Telegram ID"]) for r in recs}
    if tg_id not in ids:
        emp_ws.append_row([name, tg_id])

def record_status(name, tg_id, status, detail, reason):
    today = date.today().strftime("%d.%m.%Y")
    stat_ws.append_row([today, name, tg_id, status, detail, reason])

def parse_vac(text: str):
    parts = re.split(r"[‚Äì-]", text.strip())
    def to_dt(s):
        for fmt in ("%d.%m.%Y","%d.%m"):
            try:
                dt = datetime.strptime(s.strip(),fmt).date()
                if fmt=="%d.%m":
                    dt = dt.replace(year=date.today().year)
                return dt
            except:
                pass
        raise ValueError
    return to_dt(parts[0]), to_dt(parts[1])

def is_on_vac(tg_id:int):
    today = date.today()
    for r in stat_ws.get_all_records():
        if int(r["Telegram ID"])!=tg_id: continue
        if r["–°—Ç–∞—Ç—É—Å"]!="üå¥ –í –æ—Ç–ø—É—Å–∫–µ": continue
        try:
            start,end = parse_vac(r["–ü—Ä–∏—á–∏–Ω–∞"])
        except: continue
        if start<=today<=end: return True
    return False

# ====== HANDLERS ======
async def start(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if "name" not in ctx.user_data:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è: –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    return CHOOSING

async def name_h(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    name  = update.message.text.strip()
    tg_id = update.effective_user.id
    ctx.user_data["name"] = name
    record_employee(name, tg_id)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏: {name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup
    )
    return CHOOSING

async def choose(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    txt   = update.message.text
    tg_id = update.effective_user.id
    name  = ctx.user_data.get("name","?")
    if txt=="üè† –£–¥–∞–ª—ë–Ω–Ω–æ":
        await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª—ë–Ω–∫–∏?", reply_markup=ReplyKeyboardRemove())
        return REMOTE
    if txt=="üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö":
        await update.message.reply_text("–ß—Ç–æ –∑–∞ —Å—ä—ë–º–∫–∏?", reply_markup=ReplyKeyboardRemove())
        return SHOOT
    if txt=="üå¥ –í –æ—Ç–ø—É—Å–∫–µ":
        await update.message.reply_text("–î–∞—Ç—ã –æ—Ç–ø—É—Å–∫a (01.07‚Äì09.07):", reply_markup=ReplyKeyboardRemove())
        return VAC
    if txt=="üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ":
        now = datetime.now().strftime("%H:%M")
        record_status(name, tg_id, "üè¢ –í –æ—Ñ–∏—Å–µ", now, "")
        await update.message.reply_text(f"‚úÖ –û—Ñ–∏—Å: {now}", reply_markup=markup)
        return ConversationHandler.END
    if txt=="DayOff":
        record_status(name, tg_id, "DayOff", "", "")
        await update.message.reply_text("‚úÖ DayOff", reply_markup=markup)
        return ConversationHandler.END
    if txt=="üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤":
        today = date.today().strftime("%d.%m.%Y")
        lines = []
        for r in stat_ws.get_all_records():
            if r["–î–∞—Ç–∞"]!=today: continue
            det = r["–î–µ—Ç–∞–ª–∏"] or ""
            rea = r["–ü—Ä–∏—á–∏–Ω–∞"] or ""
            lines.append(
              f"{r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']}"+(
              f" ({det})" if det else "")+(
              f" ({rea})" if rea else "")
            )
        msg = "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π." if not lines else "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n" + "\n".join(lines)
        await update.message.reply_text(msg, reply_markup=markup)
        return ConversationHandler.END
    # –∏–Ω–∞—á–µ
    await update.message.reply_text("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.", reply_markup=markup)
    return CHOOSING

async def save_remote(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    rea = update.message.text.strip()
    name,tg = ctx.user_data["name"], update.effective_user.id
    record_status(name,tg,"üè† –£–¥–∞–ª—ë–Ω–Ω–æ","",rea)
    await update.message.reply_text("‚úÖ –£–¥–∞–ª—ë–Ω–∫–∞",reply_markup=markup)
    return ConversationHandler.END

async def save_shoot(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    det = update.message.text.strip()
    name,tg = ctx.user_data["name"], update.effective_user.id
    record_status(name,tg,"üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö",det,"")
    await update.message.reply_text("‚úÖ –°—ä—ë–º–∫–∏",reply_markup=markup)
    return ConversationHandler.END

async def save_vac(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    period = update.message.text.strip()
    name,tg = ctx.user_data["name"], update.effective_user.id
    record_status(name,tg,"üå¥ –í –æ—Ç–ø—É—Å–∫–µ",period,"")
    await update.message.reply_text(f"‚úÖ –û—Ç–ø—É—Å–∫: {period}",reply_markup=markup)
    return ConversationHandler.END

async def cancel(update:Update, ctx:ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.",reply_markup=markup)
    return ConversationHandler.END

# ====== MAIN ======

def main():
    TOKEN = os.environ["TOKEN"]
    APP_URL = os.environ["APP_URL"]  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com

    app = ApplicationBuilder()\
        .token(TOKEN)\
        .build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose)],
            REMOTE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, save_remote)],
            SHOOT:    [MessageHandler(filters.TEXT & ~filters.COMMAND, save_shoot)],
            VAC:      [MessageHandler(filters.TEXT & ~filters.COMMAND, save_vac)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True,
    )
    app.add_handler(conv)

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_path = TOKEN.split(":")[0]  # –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    final_url   = f"{APP_URL}/{webhook_path}"
    app.bot.set_webhook(final_url)

    # –∑–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å POST /<webhook_path>
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 80)),
        webhook_path=f"/{webhook_path}"
    )

if __name__ == "__main__":
    main()
