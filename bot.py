import os
from datetime import datetime, time
from telegram import (
    __version__ as ptb_ver, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, ConversationHandler, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ------------------ –ö–û–ù–§–ò–ì ------------------
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "–≤–∞—à-ID-—Ç–∞–±–ª–∏—Ü—ã")
TOKEN          = os.getenv("TOKEN",          "–≤–∞—à-–±–æ—Ç-—Ç–æ–∫–µ–Ω")
SECRET_JSON    = os.getenv("SECRET_JSON",    "/etc/secrets/credentials.json")

# –ù–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤
EMP_SHEET    = "Employees"
DATA_SHEET   = "Daily"   # –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –º–µ—Ç–∫–∏

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
(
    REG_NAME,
    CHOOSING,
    LATE_TIME, LATE_REASON,
    VAC_DATES,
    SHOOT_DETAIL,
    REMOTE_REASON
) = range(7)

# ------------------ GOOGLE SHEETS ------------------
scope = ["https://spreadsheets.google.com/feeds",
         "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(SECRET_JSON, scope)
gc    = gspread.authorize(creds)

emp_ws  = gc.open_by_key(SPREADSHEET_ID).worksheet(EMP_SHEET)
data_ws = gc.open_by_key(SPREADSHEET_ID).worksheet(DATA_SHEET)

# ------------------ –ö–õ–ê–í–ò–ê–¢–£–†–´ ------------------
MAIN_KEYS = [
    ["‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å", "üõå DayOff"],
    ["üå¥ –í –æ—Ç–ø—É—Å–∫–µ",    "üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö"],
    ["üíª –£–¥–∞–ª—ë–Ω–Ω–æ"]
]
main_kb = ReplyKeyboardMarkup(MAIN_KEYS, one_time_keyboard=True, resize_keyboard=True)

# ------------------ –•–ï–õ–ü–ï–†–´ ------------------
def append_row(name, tid, status, details="", reason=""):
    """–ó–∞–ø–∏—Å–∞—Ç—å –≤ DATA_SHEET –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É."""
    today = datetime.now().strftime("%d.%m.%Y")
    data_ws.append_row([today, name, str(tid), status, details, reason])

async def show_menu(update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=main_kb
    )
    return CHOOSING

# ------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ------------------
async def start(update: ContextTypes.DEFAULT_TYPE, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ Employees
    records = emp_ws.get_all_records()
    for r in records:
        if str(r.get("Telegram ID")) == user_id:
            context.user_data["name"] = r["Name"]
            return await show_menu(update, context)

    # –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç–º–µ—Ç–æ–∫.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å (–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è):",
        reply_markup=ReplyKeyboardRemove()
    )
    return REG_NAME

async def reg_name(update, context):
    name = update.message.text.strip()
    tid  = update.message.from_user.id
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Employees
    emp_ws.append_row([name, str(tid)])
    context.user_data["name"] = name
    await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!\n")
    return await show_menu(update, context)

# –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
async def choose(update, context):
    text   = update.message.text
    context.user_data["status"] = text

    if text == "‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å":
        await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç–µ –≤ –æ—Ñ–∏—Å–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:30)",
                                        reply_markup=ReplyKeyboardRemove())
        return LATE_TIME

    if text == "üõå DayOff":
        append_row(context.user_data["name"], update.message.from_user.id,
                   text)
        await update.message.reply_text("–û—Ç–º–µ—Ç–∫–∞ DayOff —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if text == "üå¥ –í –æ—Ç–ø—É—Å–∫–µ":
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM‚ÄìDD.MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 07.09‚Äì12.09):",
            reply_markup=ReplyKeyboardRemove()
        )
        return VAC_DATES

    if text == "üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö":
        await update.message.reply_text(
            "–ó–∞ –∫–æ–≥–æ/–∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤—ã –Ω–∞ —Å—ä—ë–º–∫–∞—Ö?",
            reply_markup=ReplyKeyboardRemove()
        )
        return SHOOT_DETAIL

    if text == "üíª –£–¥–∞–ª—ë–Ω–Ω–æ":
        await update.message.reply_text(
            "–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–¥–∞–ª—ë–Ω–Ω–æ?",
            reply_markup=ReplyKeyboardRemove()
        )
        return REMOTE_REASON

    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return ConversationHandler.END

# ‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å ‚Üí –≤—Ä–µ–º—è ‚Üí –ø—Ä–∏—á–∏–Ω–∞
async def late_time(update, context):
    context.user_data["late_time"] = update.message.text.strip()
    await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –æ–ø–æ–∑–¥–∞–Ω–∏—è?")
    return LATE_REASON

async def late_reason(update, context):
    time_   = context.user_data.pop("late_time")
    reason  = update.message.text.strip()
    append_row(context.user_data["name"], update.message.from_user.id,
               "‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å", details=time_, reason=reason)
    await update.message.reply_text("–û—Ç–º–µ—Ç–∫–∞ –æ–ø–æ–∑–¥–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# üå¥ –í –æ—Ç–ø—É—Å–∫–µ ‚Üí –¥–∞—Ç—ã
async def vac_dates(update, context):
    dates = update.message.text.strip()
    append_row(context.user_data["name"], update.message.from_user.id,
               "üå¥ –í –æ—Ç–ø—É—Å–∫–µ", details=dates)
    await update.message.reply_text("–î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return ConversationHandler.END

# üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö ‚Üí –¥–µ—Ç–∞–ª–∏
async def shoot_detail(update, context):
    detail = update.message.text.strip()
    append_row(context.user_data["name"], update.message.from_user.id,
               "üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö", details=detail)
    await update.message.reply_text("–î–µ—Ç–∞–ª–∏ —Å—ä—ë–º–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return ConversationHandler.END

# üíª –£–¥–∞–ª—ë–Ω–Ω–æ ‚Üí –ø—Ä–∏—á–∏–Ω–∞
async def remote_reason(update, context):
    reason = update.message.text.strip()
    append_row(context.user_data["name"], update.message.from_user.id,
               "üíª –£–¥–∞–ª—ë–Ω–Ω–æ", reason=reason)
    await update.message.reply_text("–û—Ç–º–µ—Ç–∫–∞ —É–¥–∞–ª—ë–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def cancel(update, context):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# /list ‚Äî –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –æ—Ç–º–µ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
async def list_today(update, context):
    today = datetime.now().strftime("%d.%m.%Y")
    rows  = data_ws.get_all_records()
    lines = []
    for r in rows:
        if r["–î–∞—Ç–∞"] == today:
            # —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É: –§–ò–û ‚Äî –°—Ç–∞—Ç—É—Å (–¥–µ—Ç–∞–ª–∏, –ø—Ä–∏—á–∏–Ω–∞)
            parts = [f"{r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']}"]
            if r.get("–î–µ—Ç–∞–ª–∏"):
                parts.append(f"({r['–î–µ—Ç–∞–ª–∏']})")
            if r.get("–ü—Ä–∏—á–∏–Ω–∞"):
                parts.append(f"¬´{r['–ü—Ä–∏—á–∏–Ω–∞']}¬ª")
            lines.append(" ".join(parts))
    text = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(f"{i+1}. {l}" for i,l in enumerate(lines))
    await update.message.reply_text(text)

# ------------------ MAIN ------------------
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            REG_NAME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
            CHOOSING:     [MessageHandler(filters.Regex("|".join(
                                [k for row in MAIN_KEYS for k in row])), choose)],
            LATE_TIME:    [MessageHandler(filters.TEXT & ~filters.COMMAND, late_time)],
            LATE_REASON:  [MessageHandler(filters.TEXT & ~filters.COMMAND, late_reason)],
            VAC_DATES:    [MessageHandler(filters.TEXT & ~filters.COMMAND, vac_dates)],
            SHOOT_DETAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, shoot_detail)],
            REMOTE_REASON:[MessageHandler(filters.TEXT & ~filters.COMMAND, remote_reason)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_user=True
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("list", list_today))

    app.run_polling()

if __name__ == "__main__":
    main()
