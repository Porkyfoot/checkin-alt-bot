# bot.py
import logging
from datetime import time, date
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# --- –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ---
(
    STATE_NAME,
    STATE_STATUS,
    STATE_REMOTE_REASON,
    STATE_SHOOT_DETAILS,
    STATE_VACATION_DATES,
) = range(5)

# Google-—Å–±–æ—Ä—ã
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "/etc/secrets/credentials.json"
SPREADSHEET_ID = "–≤–∞—à-ID-—Ç–∞–±–ª–∏—Ü—ã"
EMPLOYEE_SHEET = "Employees"
STATUS_SHEET = "Status"

# Telegram
TOKEN = "7591731653:AAEdN2b6HiF0jAvEtEP8n5hzhSbl94cu4fg"

# Keyboard
main_menu = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ"), KeyboardButton("üè† –£–¥–∞–ª—ë–Ω–Ω–æ")],
        [KeyboardButton("üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö"), KeyboardButton("üå¥ –í –æ—Ç–ø—É—Å–∫–µ")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")],
    ],
    resize_keyboard=True,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)

    rows = emp_ws.get_all_records()
    ids = [str(r.get("Telegram ID", "")).strip() for r in rows]

    current_id = str(update.effective_user.id).strip()
    logger.info(f"User ID: {current_id}, existing IDs: {ids}")

    if current_id not in ids:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å: –§–∞–º–∏–ª–∏—è –ò–º—è (—Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏).")
        return STATE_NAME

    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=main_menu)
    return STATE_STATUS


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)

    fullname = update.message.text.strip()
    user_id = str(update.effective_user.id).strip()

    emp_ws.append_row([fullname, user_id])
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=main_menu)
    return STATE_STATUS


async def handle_office(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_status(update, "–û—Ñ–∏—Å", "")
    await update.message.reply_text("–û—Ç–º–µ—Ç–∏–ª ‚Äî –≤—ã –≤ –æ—Ñ–∏—Å–µ.")
    return ConversationHandler.END


async def handle_remote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª—ë–Ω–∫–∏ (–±–æ–ª–µ—é, –¥–æ–º–∞ –∂–¥—É –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Ç.–ø.)")
    return STATE_REMOTE_REASON


async def remote_reason_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text.strip()
    await save_status(update, "–£–¥–∞–ª—ë–Ω–Ω–æ", reason)
    await update.message.reply_text("–û—Ç–º–µ—Ç–∏–ª ‚Äî –≤—ã –Ω–∞ —É–¥–∞–ª—ë–Ω–∫–µ.")
    return ConversationHandler.END


async def handle_shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ: –≥–¥–µ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ —Å—ä—ë–º–∫–∞?")
    return STATE_SHOOT_DETAILS


async def shoot_details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    details = update.message.text.strip()
    await save_status(update, "–°—ä—ë–º–∫–∞", details)
    await update.message.reply_text("–û—Ç–º–µ—Ç–∏–ª ‚Äî –≤—ã –Ω–∞ —Å—ä—ë–º–∫–µ.")
    return ConversationHandler.END


async def handle_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.07 ‚Äî 25.07):")
    return STATE_VACATION_DATES


async def vacation_dates_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dates = update.message.text.strip()
    await save_status(update, "–û—Ç–ø—É—Å–∫", dates)
    await update.message.reply_text("–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞! –û—Ç–º–µ—Ç–∏–ª.")
    return ConversationHandler.END


async def save_status(update: Update, status: str, note: str):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    status_ws = client.open_by_key(SPREADSHEET_ID).worksheet(STATUS_SHEET)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)

    rows = emp_ws.get_all_records()
    user_id = str(update.effective_user.id).strip()
    name = next((r["–ò–º—è"] for r in rows if str(r.get("Telegram ID", "")).strip() == user_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

    today = date.today().strftime("%d.%m.%Y")
    status_ws.append_row([today, name, status, note])


async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    status_ws = client.open_by_key(SPREADSHEET_ID).worksheet(STATUS_SHEET)

    today = date.today().strftime("%d.%m.%Y")
    records = status_ws.get_all_records()
    lines = [r for r in records if r["–î–∞—Ç–∞"] == today]
    text = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for i, r in enumerate(lines, 1):
        note = r.get("–ü—Ä–∏—á–∏–Ω–∞", "") or r.get("–í—Ä–µ–º—è", "") or ""
        text += f"{i}. {r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']} ({note})\n"
    await update.message.reply_text(text)
    return ConversationHandler.END


async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)
    rows = emp_ws.get_all_records()

    for r in rows:
        try:
            uid = int(r["Telegram ID"])
            await context.bot.send_message(chat_id=uid, text="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòâ", reply_markup=main_menu)
        except Exception as e:
            logger.error(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {r}: {e}")


def build_application():
    return ApplicationBuilder().token(TOKEN).build()


def main():
    app = build_application()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            STATE_STATUS: [
                MessageHandler(filters.Regex("^üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ$"), handle_office),
                MessageHandler(filters.Regex("^üè† –£–¥–∞–ª—ë–Ω–Ω–æ$"), handle_remote),
                MessageHandler(filters.Regex("^üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö$"), handle_shoot),
                MessageHandler(filters.Regex("^üå¥ –í –æ—Ç–ø—É—Å–∫–µ$"), handle_vacation),
                MessageHandler(filters.Regex("^üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤$"), show_list),
            ],
            STATE_REMOTE_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, remote_reason_handler)],
            STATE_SHOOT_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, shoot_details_handler)],
            STATE_VACATION_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, vacation_dates_handler)],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    app.add_handler(conv)

    remind_time = time(hour=9, minute=30)
    app.job_queue.run_daily(send_reminder, remind_time, days=(0, 1, 2, 3, 4))

    app.run_polling()


if __name__ == "__main__":
    main()
