import os
import logging
from datetime import datetime, timedelta

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# --- CONFIG ---
TOKEN = os.environ['TOKEN']
SPREADSHEET_NAME = '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –û—Ç–º–µ—Ç–∫–∏'
TIMEZONE_OFFSET = 5  # for Almaty

# --- Google Sheets Setup ---
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "/etc/secrets/credentials.json", scope
)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

# --- States ---
CHOOSING_STATUS, TYPING_TIME, TYPING_REASON = range(3)
user_data_temp = {}

# --- Logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


def get_today_date():
    return (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).strftime('%d.%m.%Y')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç—É—Å–æ–≤
    keyboard = [
        ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', '‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å'],
        ['üè† –£–¥–∞–ª—ë–Ω–Ω–æ', 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö'],
        ['üå¥ –í –æ—Ç–ø—É—Å–∫–µ', 'üõå DayOff'],
        ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤']
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ì–¥–µ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ—à—å?", reply_markup=markup
    )
    return CHOOSING_STATUS


async def status_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = update.message.text
    user_id = update.message.from_user.id
    name = update.message.from_user.full_name

    if status == 'üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
        await send_sheet_data(update)
        return ConversationHandler.END

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data_temp[user_id] = {'name': name, 'status': status, 'telegram_id': user_id}

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if status == 'üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        await update.message.reply_text(
            "–£–∫–∞–∂–∏ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 11.07‚Äì20.07)"
        )
        return TYPING_REASON
    elif status == 'üõå DayOff':
        # —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º DayOff –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
        return await save_and_thank(update, user_id, "")
    elif status == 'üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ':
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞
        user_data_temp[user_id]['time'] = (
            datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        ).strftime('%H:%M')
        return await save_and_thank(update, user_id, "")
    elif status == '‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å':
        await update.message.reply_text(
            "–ö–æ–≥–¥–∞ —Ç—ã –±—É–¥–µ—à—å –Ω–∞ —Ä–∞–±–æ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:30)"
        )
        return TYPING_TIME
    elif status == 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ':
        await update.message.reply_text(
            "–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —É–¥–∞–ª—ë–Ω–Ω–æ?"
        )
        return TYPING_REASON
    else:
        # —Å—ä–µ–º–∫–∏
        await update.message.reply_text(
            "–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∑–∞ —Å—ä–µ–º–∫–∏ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"
        )
        return TYPING_REASON


async def received_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data_temp[user_id]['time'] = update.message.text
    # –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–∏–º –ø—Ä–∏—á–∏–Ω—É, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å
    await update.message.reply_text(
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏. –ò–Ω–∞—á–µ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'"
    )
    return TYPING_REASON


async def received_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    reason = update.message.text
    return await save_and_thank(update, user_id, reason)


async def save_and_thank(update, user_id, reason):
    data = user_data_temp[user_id]
    today = get_today_date()
    row = [
        today,
        data['name'],
        str(data['telegram_id']),
        data['status'],
        data.get('time', ''),
        reason,
        ''
    ]
    sheet.append_row(row)
    await update.message.reply_text(
        "‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ. –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def send_sheet_data(update: Update):
    try:
        records = sheet.get_all_records()
        if not records:
            await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
            return

        today = get_today_date()
        text = "üóÇ –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n"
        for idx, row in enumerate(records, 1):
            if row.get('–î–∞—Ç–∞') == today:
                name = row.get('–ò–º—è', '‚Äî')
                status = row.get('–°—Ç–∞—Ç—É—Å', '')
                time = row.get('–í—Ä–µ–º—è', '')
                extra = f" ({time})" if time else ''
                text += f"{idx}. {name} ‚Äî {status}{extra}\n"

        await update.message.reply_text(text or "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û–∫–µ–π, –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, status_chosen)],
            TYPING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_time)],
            TYPING_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_reason)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv)
    app.run_polling()


if __name__ == '__main__':
    main()
