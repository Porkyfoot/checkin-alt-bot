#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from datetime import datetime, date, time
import re

import gspread
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò GOOGLE SHEETS ======
gc = gspread.service_account(filename="/etc/secrets/credentials.json")
SPREADSHEET = "checkin-alt-bot"
EMP_SHEET_NAME = "Employees"
STAT_SHEET_NAME = "Status"
employees_ws = gc.open(SPREADSHEET).worksheet(EMP_SHEET_NAME)
status_ws    = gc.open(SPREADSHEET).worksheet(STAT_SHEET_NAME)

# ====== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ====== –°–¢–ï–ô–¢–´ ======
CHOOSING, REMOTE_REASON, SHOOT_DETAIL, VACATION_DATES, DELAY_TIME, DELAY_REASON = range(6)

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–ê ======
main_keyboard = [
    ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ'],
    ['üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö',    'üå¥ –í –æ—Ç–ø—É—Å–∫–µ'],
    ['‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å',  'DayOff'],
    ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤']
]
markup = ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)

# ====== –£–¢–ò–õ–ò–¢–´ ======

def record_employee(name: str, tg_id: int):
    records = employees_ws.get_all_records()
    ids = {int(r["Telegram ID"]) for r in records}
    if tg_id not in ids:
        employees_ws.append_row([name, tg_id])


def record_status(name: str, tg_id: int, status: str, reason: str, period: str):
    today = date.today().strftime("%d.%m.%Y")
    # columns: –î–∞—Ç–∞, –ò–º—è, Telegram ID, –°—Ç–∞—Ç—É—Å, –ü–µ—Ä–∏–æ–¥, –ü—Ä–∏—á–∏–Ω–∞
    status_ws.append_row([today, name, tg_id, status, period, reason, ""])


def parse_vacation(text: str):
    parts = re.split(r"[‚Äì-]", text.strip())
    def to_date(s):
        for fmt in ("%d.%m.%Y", "%d.%m"):
            try:
                dt = datetime.strptime(s.strip(), fmt)
                if fmt == "%d.%m": dt = dt.replace(year=date.today().year)
                return dt.date()
            except ValueError:
                continue
        raise ValueError(f"–Ω–µ –∑–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã {s}")
    return to_date(parts[0]), to_date(parts[1])


def is_on_vacation(tg_id: int) -> bool:
    today = date.today()
    recs = status_ws.get_all_records()
    for r in recs:
        if int(r["Telegram ID"]) != tg_id: continue
        if r["–°—Ç–∞—Ç—É—Å"] != "üå¥ –í –æ—Ç–ø—É—Å–∫–µ": continue
        try:
            start, end = parse_vacation(r["–ü–µ—Ä–∏–æ–¥"])
        except:
            continue
        if start <= today <= end:
            return True
    return False

# ====== HANDLERS ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if "name" not in context.user_data:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è: —É–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    record_employee(context.user_data['name'], user.id)
    return CHOOSING

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    tg_id = update.effective_user.id
    context.user_data["name"] = text
    record_employee(text, tg_id)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏: {text}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup
    )
    return CHOOSING

async def choose_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    name = context.user_data["name"]
    tg_id = update.effective_user.id

    if text == 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ':
        await update.message.reply_text("–ü–æ—á–µ–º—É —É–¥–∞–ª—ë–Ω–Ω–æ?", reply_markup=ReplyKeyboardRemove())
        return REMOTE_REASON

    if text == 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö':
        await update.message.reply_text("–û–ø–∏—à–∏ —Å—ä—ë–º–∫–∏:", reply_markup=ReplyKeyboardRemove())
        return SHOOT_DETAIL

    if text == 'üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 01.07‚Äì09.07):", reply_markup=ReplyKeyboardRemove())
        return VACATION_DATES

    if text == '‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å':
        await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—à—å –Ω–∞ —Ä–∞–±–æ—Ç–µ?", reply_markup=ReplyKeyboardRemove())
        return DELAY_TIME

    if text == 'DayOff':
        record_status(name, tg_id, "DayOff", "", "")
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: DayOff", reply_markup=markup)
        return ConversationHandler.END

    if text == 'üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ':
        now = datetime.now().strftime("%H:%M")
        record_status(name, tg_id, "üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ", "", now)
        await update.message.reply_text(f"‚úÖ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ ({now})", reply_markup=markup)
        return ConversationHandler.END

    if text == 'üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
        today = date.today().strftime("%d.%m.%Y")
        recs = status_ws.get_all_records()
        lines = []
        for r in recs:
            if r["–î–∞—Ç–∞"] != today: continue
            period = r.get("–ü–µ—Ä–∏–æ–¥", "") or r.get("–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", "")
            reason = r.get("–ü—Ä–∏—á–∏–Ω–∞", "")
            lines.append(
                f"{r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']}"
                + (f" ({period})" if period else "")
                + (f" ({reason})" if reason else "")
            )
        msg = (
            "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(f"{i+1}. {l}" for i, l in enumerate(lines))
            if lines else "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Ç–º–µ—Ç–æ–∫."
        )
        await update.message.reply_text(msg, reply_markup=markup)
        return ConversationHandler.END

    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.", reply_markup=markup)
    return CHOOSING

async def save_remote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üè† –£–¥–∞–ª—ë–Ω–Ω–æ", reason, "")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–¥–∞–ª—ë–Ω–Ω–æ", reply_markup=markup)
    return ConversationHandler.END

async def save_shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detail = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö", detail, "")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –Ω–∞ —Å—ä—ë–º–∫–∞—Ö", reply_markup=markup)
    return ConversationHandler.END

async def save_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    period = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üå¥ –í –æ—Ç–ø—É—Å–∫–µ", "", period)
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –æ—Ç–ø—É—Å–∫ {period}", reply_markup=markup)
    return ConversationHandler.END

async def delay_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = update.message.text.strip()
    context.user_data['delay_time'] = t
    await update.message.reply_text("–£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–¥–µ—Ä–∂–∫–∏:", reply_markup=ReplyKeyboardRemove())
    return DELAY_REASON

async def save_delay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text.strip()
    period = context.user_data.get('delay_time', '')
    name = context.user_data['name']
    tg_id = update.effective_user.id
    record_status(name, tg_id, "‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å", reason, period)
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –∑–∞–¥–µ—Ä–∂–∫–∞ {period} ({reason})", reply_markup=markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=markup)
    return ConversationHandler.END

async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    today = date.today().strftime("%d.%m.%Y")
    emps = employees_ws.get_all_records()
    recs = status_ws.get_all_records()
    done = {int(r["Telegram ID"]) for r in recs if r["–î–∞—Ç–∞"] == today}
    for r in emps:
        tg_id = int(r["Telegram ID"])
        if tg_id in done or is_on_vacation(tg_id): continue
        try:
            await context.bot.send_message(chat_id=tg_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
                reply_markup=markup
            )
        except Exception as e:
            logging.error(f"–ù–µ –¥–æ—Å—Ç–∞–≤–∏—Ç—å {tg_id}: {e}")


def main():
    TOKEN = "<–í–ê–®_–¢–û–ö–ï–ù>"
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING:      [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_status)],
            REMOTE_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_remote)],
            SHOOT_DETAIL:  [MessageHandler(filters.TEXT & ~filters.COMMAND, save_shoot)],
            VACATION_DATES:[MessageHandler(filters.TEXT & ~filters.COMMAND, save_vacation)],
            DELAY_TIME:    [MessageHandler(filters.TEXT & ~filters.COMMAND, delay_time_handler)],
            DELAY_REASON:  [MessageHandler(filters.TEXT & ~filters.COMMAND, save_delay)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)

    remind = time(hour=9, minute=30)
    app.job_queue.run_daily(daily_reminder, remind, days=(0,1,2,3,4))

    app.run_polling()

if __name__ == "__main__":
    main()
