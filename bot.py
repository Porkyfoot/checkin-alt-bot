# bot.py
import logging
from datetime import date, time
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(STATE_NAME, STATE_STATUS, STATE_REMOTE_REASON, STATE_SHOOT_DETAILS, STATE_VACATION_DATES) = range(5)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "credentials.json"
SPREADSHEET_ID = "1sqyMu6iLnT1nxDckQO7BjjIhdVwzLsBAA_lib1eoQ_M"
EMPLOYEE_SHEET = "Employees"
STATUS_SHEET = "Status"
TOKEN = "7591731653:AAEdN2b6HiF0jAvEtEP8n5hzhSbl94cu4fg"

main_menu = ReplyKeyboardMarkup([
    [KeyboardButton("üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ"), KeyboardButton("üè† –£–¥–∞–ª—ë–Ω–Ω–æ")],
    [KeyboardButton("üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö"), KeyboardButton("üå¥ –í –æ—Ç–ø—É—Å–∫–µ")],
    [KeyboardButton("üö´ Dayoff"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")],
], resize_keyboard=True)

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)
    ids = [str(r["Telegram ID"]) for r in emp_ws.get_all_records()]
    if str(update.effective_user.id) not in ids:
        await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–∞–º–∏–ª–∏—è –ò–º—è)")
        return STATE_NAME
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=main_menu)
    return STATE_STATUS

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)
    emp_ws.append_row([update.message.text.strip(), str(update.effective_user.id)])
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", reply_markup=main_menu)
    return STATE_STATUS

async def save_status(update, status, detail_key="", detail_value=""):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)
    stat_ws = client.open_by_key(SPREADSHEET_ID).worksheet(STATUS_SHEET)
    user_id = str(update.effective_user.id)
    name = next((r["–ò–º—è"] for r in emp_ws.get_all_records() if str(r["Telegram ID"]) == user_id), None)
    if name:
        today = date.today().strftime("%d.%m.%Y")
        row = [today, name, status, "", ""]
        if detail_key == "–ü—Ä–∏—á–∏–Ω–∞":
            row[3] = detail_value
        elif detail_key == "–í—Ä–µ–º—è":
            row[4] = detail_value
        stat_ws.append_row(row)
    await update.message.reply_text("–°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")

async def handle_office(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_status(update, "–û—Ñ–∏—Å", "–í—Ä–µ–º—è", "—Å 10:00")
    return ConversationHandler.END

async def handle_remote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª—ë–Ω–∫–∏?")
    return STATE_REMOTE_REASON

async def remote_reason_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_status(update, "–£–¥–∞–ª—ë–Ω–Ω–æ", "–ü—Ä–∏—á–∏–Ω–∞", update.message.text.strip())
    return ConversationHandler.END

async def handle_shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–¥–µ —Å—ä—ë–º–∫–∞?")
    return STATE_SHOOT_DETAILS

async def shoot_details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_status(update, "–°—ä—ë–º–∫–∞", "–ü—Ä–∏—á–∏–Ω–∞", update.message.text.strip())
    return ConversationHandler.END

async def handle_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π?")
    return STATE_VACATION_DATES

async def vacation_dates_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_status(update, "–û—Ç–ø—É—Å–∫", "–ü—Ä–∏—á–∏–Ω–∞", update.message.text.strip())
    return ConversationHandler.END

async def handle_dayoff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await save_status(update, "Dayoff")
    return ConversationHandler.END

async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    stat_ws = gspread.authorize(creds).open_by_key(SPREADSHEET_ID).worksheet(STATUS_SHEET)
    today = date.today().strftime("%d.%m.%Y")
    lines = [r for r in stat_ws.get_all_records() if r["–î–∞—Ç–∞"] == today]
    text = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:

" + "
".join(
        f"{i+1}. {r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']} ({r['–ü—Ä–∏—á–∏–Ω–∞'] or r['–í—Ä–µ–º—è']})" for i, r in enumerate(lines)
    )
    await update.message.reply_text(text or "–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            STATE_STATUS: [
                MessageHandler(filters.Regex("^üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ$"), handle_office),
                MessageHandler(filters.Regex("^üè† –£–¥–∞–ª—ë–Ω–Ω–æ$"), handle_remote),
                MessageHandler(filters.Regex("^üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö$"), handle_shoot),
                MessageHandler(filters.Regex("^üå¥ –í –æ—Ç–ø—É—Å–∫–µ$"), handle_vacation),
                MessageHandler(filters.Regex("^üö´ Dayoff$"), handle_dayoff),
                MessageHandler(filters.Regex("^üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤$"), show_list),
            ],
            STATE_REMOTE_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, remote_reason_handler)],
            STATE_SHOOT_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, shoot_details_handler)],
            STATE_VACATION_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, vacation_dates_handler)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
