#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import threading
import http.server
import socketserver
import logging
from datetime import datetime, date, time
import re

import gspread
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# ====== CONFIGURATION ======
# Telegram Bot Token and Google Spreadsheet ID from environment variables
TOKEN = os.environ["TOKEN"]
SPREADSHEET_ID = os.environ["SPREADSHEET_ID"]
# Path to service account JSON key mounted in Render secrets
CREDENTIALS_PATH = "/etc/secrets/credentials.json"

# ====== GOOGLE SHEETS SETUP ======
gc = gspread.service_account(filename=CREDENTIALS_PATH)
# Two worksheets: Employees list and daily Status log
employees_ws = gc = gc = gc = gc.open_by_key(SPREADSHEET_ID).worksheet("Employees")
status_ws    = gc.open_by_key(SPREADSHEET_ID).worksheet("Status")

# ====== LOGGING ======
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ====== STATES ======
CHOOSING, REMOTE_REASON, SHOOT_DETAIL, VACATION_DATES = range(4)

# ====== REPLY KEYBOARD ======
main_keyboard = [
    ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ'],
    ['üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö',    'üå¥ –í –æ—Ç–ø—É—Å–∫–µ'],
    ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', 'üåô DayOff']
]
markup = ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)

# ====== GOOGLE SHEETS HELPERS ======

def record_employee(name: str, tg_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ Employees, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç."""
    records = employees_ws.get_all_records()
    ids = {int(r["–¢–µ–ª–µ–≥—Ä–∞–º ID"]) for r in records}
    if tg_id not in ids:
        employees_ws.append_row([name, tg_id])


def record_status(name: str, tg_id: int, status: str, details: str, reason: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ Status."""
    today = date.today().strftime("%d.%m.%Y")
    status_ws.append_row([today, name, tg_id, status, details, reason])

# ====== VACATION PARSING ======

def parse_vacation(text: str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "01.07-09.07" –∏–ª–∏ —Å –≥–æ–¥–æ–º."""
    parts = re.split(r"[‚Äì-]", text.strip())
    def to_date(s: str):
        for fmt in ("%d.%m.%Y", "%d.%m"):
            try:
                dt = datetime.strptime(s.strip(), fmt)
                if fmt == "%d.%m":
                    dt = dt.replace(year=date.today().year)
                return dt.date()
            except ValueError:
                continue
        raise ValueError(f"–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {s}")
    return to_date(parts[0]), to_date(parts[1])


def is_on_vacation(tg_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–ø—É—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–µ–≥–æ–¥–Ω—è."""
    today = date.today()
    for r in status_ws.get_all_records():
        if int(r["–¢–µ–ª–µ–≥—Ä–∞–º ID"]) != tg_id:
            continue
        if r["–°—Ç–∞—Ç—É—Å"] != "üå¥ –í –æ—Ç–ø—É—Å–∫–µ":
            continue
        try:
            start, end = parse_vacation(r["–ü—Ä–∏—á–∏–Ω–∞"])
            if start <= today <= end:
                return True
        except Exception:
            pass
    return False

# ====== HANDLERS ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "name" not in context.user_data:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è: –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING
    # —É–∂–µ –µ—Å—Ç—å –∏–º—è ‚Üí –º–µ–Ω—é
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    return CHOOSING


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    tg_id = update.effective_user.id
    context.user_data["name"] = name
    record_employee(name, tg_id)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏ –∏–º—è: {name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=markup
    )
    return CHOOSING


async def name_or_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –µ—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ ‚Äî –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ
    if "name" not in context.user_data:
        return await name_handler(update, context)
    # –∏–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    return await choose_status(update, context)


async def choose_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    tg_id = update.effective_user.id
    name = context.user_data["name"]

    if text == 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ':
        await update.message.reply_text("–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å —É–¥–∞–ª—ë–Ω–Ω–æ?", reply_markup=ReplyKeyboardRemove())
        return REMOTE_REASON
    if text == 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö':
        await update.message.reply_text("–û–ø–∏—à–∏, —á—Ç–æ –∑–∞ —Å—ä—ë–º–∫–∏:", reply_markup=ReplyKeyboardRemove())
        return SHOOT_DETAIL
    if text == 'üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä. 01.07-09.07):", reply_markup=ReplyKeyboardRemove())
        return VACATION_DATES
    if text == 'üåô DayOff':
        record_status(name, tg_id, "üåô DayOff", "", "")
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: DayOff", reply_markup=markup)
        return ConversationHandler.END
    if text == 'üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ':
        now = datetime.now().strftime("%H:%M")
        record_status(name, tg_id, "üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ", now, "")
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –≤ –æ—Ñ–∏—Å–µ ({now})", reply_markup=markup)
        return ConversationHandler.END
    if text == 'üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
        today = date.today().strftime("%d.%m.%Y")
        recs = status_ws.get_all_records()
        lines = []
        for r in recs:
            if r["–î–∞—Ç–∞"] != today:
                continue
            det = r.get("–î–µ—Ç–∞–ª–∏", "")
            reason = r.get("–ü—Ä–∏—á–∏–Ω–∞", "")
            part = f"({det})" if det else ""
            part += f" ({reason})" if reason else ""
            lines.append(f"{r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']} {part}".strip())
        msg = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Ç–º–µ—Ç–æ–∫." if not lines else "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(f"{i+1}. {l}" for i,l in enumerate(lines))
        await update.message.reply_text(msg, reply_markup=markup)
        return ConversationHandler.END
    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é.", reply_markup=markup)
    return CHOOSING


async def save_remote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üè† –£–¥–∞–ª—ë–Ω–Ω–æ", "", reason)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–¥–∞–ª—ë–Ω–Ω–æ", reply_markup=markup)
    return ConversationHandler.END


async def save_shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detail = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö", detail, "")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –Ω–∞ —Å—ä—ë–º–∫–∞—Ö", reply_markup=markup)
    return ConversationHandler.END


async def save_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    period = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üå¥ –í –æ—Ç–ø—É—Å–∫–µ", period, "")
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –æ—Ç–ø—É—Å–∫ {period}", reply_markup=markup)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=markup)
    return ConversationHandler.END

# ====== DAILY REMINDER JOB ======

async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    today = date.today().strftime("%d.%m.%Y")
    emps = employees_ws.get_all_records()
    recs = status_ws.get_all_records()
    done = {int(r['–¢–µ–ª–µ–≥—Ä–∞–º ID']) for r in recs if r['–î–∞—Ç–∞']==today}
    for r in emps:
        tg_id = int(r['–¢–µ–ª–µ–≥—Ä–∞–º ID'])
        if tg_id in done or is_on_vacation(tg_id):
            continue
        try:
            await context.bot.send_message(chat_id=tg_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

# ====== MAIN ======

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING:      [MessageHandler(filters.TEXT & ~filters.COMMAND, name_or_status)],
            REMOTE_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_remote)],
            SHOOT_DETAIL:  [MessageHandler(filters.TEXT & ~filters.COMMAND, save_shoot)],
            VACATION_DATES:[MessageHandler(filters.TEXT & ~filters.COMMAND, save_vacation)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)

    # Schedule daily reminder Mon-Fri at 09:30
    remind_time = time(hour=9, minute=30)
    app.job_queue.run_daily(daily_reminder, remind_time, days=(0,1,2,3,4))

    app.run_polling()

# ====== HTTP SERVER FOR RENDER ======

def serve_web():
    port = int(os.environ.get("PORT", 8000))
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("0.0.0.0", port), handler) as httpd:
        httpd.serve_forever()

if __name__ == "__main__":
    threading.Thread(target=serve_web, daemon=True).start()
    main()
