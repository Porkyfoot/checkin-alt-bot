#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import threading
import http.server
import socketserver
import logging
from datetime import datetime, date, time
import re

import gspread
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = os.environ["TOKEN"]
SPREADSHEET_ID = os.environ["SPREADSHEET_ID"]
EMP_SHEET_NAME = "Employees"
STAT_SHEET_NAME = "Status"
CRED_PATH = "/etc/secrets/credentials.json"  # Render: –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—é–¥–∞ JSON –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞

# ====== GSheets ======
gc = gspread.service_account(filename=CRED_PATH)
employees_ws = gc.open_by_key(SPREADSHEET_ID).worksheet(EMP_SHEET_NAME)
status_ws    = gc.open_by_key(SPREADSHEET_ID).worksheet(STAT_SHEET_NAME)

# ====== –õ–û–ì–ò ======
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ====== Conversation States ======
CHOOSING, REMOTE_REASON, SHOOT_DETAIL, VACATION_DATES = range(4)

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ======
main_keyboard = [
    ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ'],
    ['üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö',    'üå¥ –í –æ—Ç–ø—É—Å–∫–µ'],
    ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', 'DayOff']
]
markup = ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)

# ====== –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è GSheets ======
def record_employee(name: str, tg_id: int):
    recs = employees_ws.get_all_records()
    ids = {int(r["Telegram ID"]) for r in recs}
    if tg_id not in ids:
        employees_ws.append_row([name, tg_id])

def record_status(name: str, tg_id: int, status: str, period: str, reason: str):
    today = date.today().strftime("%d.%m.%Y")
    status_ws.append_row([today, name, tg_id, status, period, reason, ""])

def parse_vacation(text: str):
    parts = re.split(r"[‚Äì-]", text.strip())
    def to_date(s):
        for fmt in ("%d.%m.%Y", "%d.%m"):
            try:
                dt = datetime.strptime(s.strip(), fmt)
                if fmt == "%d.%m":
                    dt = dt.replace(year=date.today().year)
                return dt.date()
            except ValueError:
                continue
        raise ValueError(f"–Ω–µ –∑–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã {s}")
    return to_date(parts[0]), to_date(parts[1])

def is_on_vacation(tg_id: int):
    today = date.today()
    for r in status_ws.get_all_records():
        if int(r["Telegram ID"]) != tg_id or r["–°—Ç–∞—Ç—É—Å"] != "üå¥ –í –æ—Ç–ø—É—Å–∫–µ":
            continue
        try:
            start, end = parse_vacation(r["–ü–µ—Ä–∏–æ–¥"] or r["–ü—Ä–∏—á–∏–Ω–∞"])
        except:
            continue
        if start <= today <= end:
            return True
    return False

# ====== Handlers ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "name" not in context.user_data:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è: —É–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    return CHOOSING

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    tg_id = update.effective_user.id
    context.user_data["name"] = name
    record_employee(name, tg_id)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏: {name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=markup
    )
    return CHOOSING

async def choose_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    name = context.user_data.get("name")
    tg_id = update.effective_user.id

    if not name:
        await update.message.reply_text("–ù—É–∂–Ω–æ —Å–ø–µ—Ä–≤–∞ —É–∫–∞–∑–∞—Ç—å –∏–º—è —á–µ—Ä–µ–∑ /start.")
        return CHOOSING

    if text == 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ':
        await update.message.reply_text("–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–¥–∞–ª—ë–Ω–Ω–æ?", reply_markup=ReplyKeyboardRemove())
        return REMOTE_REASON

    if text == 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö':
        await update.message.reply_text("–û–ø–∏—à–∏, —á—Ç–æ –∑–∞ —Å—ä—ë–º–∫–∏:", reply_markup=ReplyKeyboardRemove())
        return SHOOT_DETAIL

    if text == 'üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        await update.message.reply_text("–ö–∞–∫–∏–µ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä. 01.07‚Äì09.07)?", reply_markup=ReplyKeyboardRemove())
        return VACATION_DATES

    if text == 'DayOff':
        record_status(name, tg_id, "DayOff", "", "")
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: DayOff", reply_markup=markup)
        return ConversationHandler.END

    if text == 'üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ':
        now = datetime.now().strftime("%H:%M")
        record_status(name, tg_id, "üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ", now, "")
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–∂–µ –≤ –æ—Ñ–∏—Å–µ ({now})", reply_markup=markup)
        return ConversationHandler.END

    if text == 'üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
        today = date.today().strftime("%d.%m.%Y")
        lines = []
        for r in status_ws.get_all_records():
            if r["–î–∞—Ç–∞"] != today: continue
            period = r["–ü–µ—Ä–∏–æ–¥"] or r["–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è"] or ""
            reason = r["–ü—Ä–∏—á–∏–Ω–∞"] or ""
            lines.append(
                f"{r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']}"
                + (f" ({period})" if period else "")
                + (f" ({reason})" if reason else "")
            )
        msg = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(f"{i+1}. {l}" for i,l in enumerate(lines)) \
              if lines else "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏."
        await update.message.reply_text(msg, reply_markup=markup)
        return ConversationHandler.END

    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.", reply_markup=markup)
    return CHOOSING

async def save_remote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üè† –£–¥–∞–ª—ë–Ω–Ω–æ", "", reason)
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–¥–∞–ª—ë–Ω–Ω–æ", reply_markup=markup)
    return ConversationHandler.END

async def save_shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detail = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö", detail, "")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –Ω–∞ —Å—ä—ë–º–∫–∞—Ö", reply_markup=markup)
    return ConversationHandler.END

async def save_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    period = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üå¥ –í –æ—Ç–ø—É—Å–∫–µ", period, "")
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –æ—Ç–ø—É—Å–∫ {period}", reply_markup=markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=markup)
    return ConversationHandler.END

# ====== –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å ======
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    today = date.today().strftime("%d.%m.%Y")
    done = {int(r["Telegram ID"]) for r in status_ws.get_all_records() if r["–î–∞—Ç–∞"] == today}
    for r in employees_ws.get_all_records():
        tg_id = int(r["Telegram ID"])
        if tg_id in done or is_on_vacation(tg_id):
            continue
        try:
            await context.bot.send_message(chat_id=tg_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {tg_id} –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {e}")

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ======
def start_http_server():
    port = int(os.environ.get("PORT", 8000))
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("0.0.0.0", port), handler) as httpd:
        httpd.serve_forever()

# ====== –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ======
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING:       [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_status)],
            REMOTE_REASON:  [MessageHandler(filters.TEXT & ~filters.COMMAND, save_remote)],
            SHOOT_DETAIL:   [MessageHandler(filters.TEXT & ~filters.COMMAND, save_shoot)],
            VACATION_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_vacation)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)

    # –∑–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
    threading.Thread(target=start_http_server, daemon=True).start()

    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∂–æ–± (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫‚Äì–ø—è—Ç–Ω–∏—Ü–∞ –≤ 9:30)
    app.job_queue.run_daily(daily_reminder, time(hour=9, minute=30), days=(0,1,2,3,4))

    # –∑–∞–ø—É—Å–∫–∞–µ–º polling
    app.run_polling()

if __name__ == "__main__":
    main()
