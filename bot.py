#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from datetime import datetime, time, date
import re

import gspread
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò GOOGLE SHEETS ======
# –ü–æ–º–µ—Å—Ç–∏—Ç–µ JSON-–∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –ø—É—Ç–∏ /etc/secrets/credentials.json
gc = gspread.service_account(filename="/etc/secrets/credentials.json")
SPREADSHEET = "checkin-alt-bot"  # –∏–º—è –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
EMP_SHEET_NAME = "Employees"
STAT_SHEET_NAME = "Status"

# –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–∞ –ª–∏—Å—Ç–∞: —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –ª–æ–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
employees_ws = gc.open(SPREADSHEET).worksheet(EMP_SHEET_NAME)
status_ws    = gc.open(SPREADSHEET).worksheet(STAT_SHEET_NAME)

# ====== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ====== –°–¢–ï–ô–¢–´ –î–õ–Ø ConversationHandler ======
CHOOSING, REMOTE_REASON, SHOOT_DETAIL, VACATION_DATES = range(4)

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–ê –ú–ï–ù–Æ ======
main_keyboard = [
    ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ'],
    ['üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö',    'üå¥ –í –æ—Ç–ø—É—Å–∫–µ'],
    ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', 'DayOff']
]
markup = ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)


# ====== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø GOOGLE SHEETS ======

def record_employee(name: str, tg_id: int):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ Employees, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç."""
    records = employees_ws.get_all_records()
    ids = {int(r["Telegram ID"]) for r in records}
    if tg_id not in ids:
        employees_ws.append_row([name, tg_id])

def record_status(name: str, tg_id: int, status: str, reason: str, period: str):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ Status."""
    today = date.today().strftime("%d.%m.%Y")
    status_ws.append_row([today, name, tg_id, status, period, reason, ""])


# ====== HELPERS ======

def parse_vacation(text: str):
    """–ü–∞—Ä—Å–∏—Ç ¬´01.07‚Äì09.07¬ª –∏–ª–∏ ¬´01.07.2025‚Äì09.07.2025¬ª ‚Üí –¥–≤–∞ date."""
    parts = re.split(r"[‚Äì-]", text.strip())
    def to_date(s):
        for fmt in ("%d.%m.%Y", "%d.%m"):
            try:
                dt = datetime.strptime(s.strip(), fmt)
                if fmt == "%d.%m":
                    dt = dt.replace(year=date.today().year)
                return dt.date()
            except ValueError:
                continue
        raise ValueError(f"–Ω–µ –∑–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã {s}")
    start, end = to_date(parts[0]), to_date(parts[1])
    return start, end

def is_on_vacation(tg_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ Status, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–ø—É—Å–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    today = date.today()
    recs = status_ws.get_all_records()
    for r in recs:
        if int(r["Telegram ID"]) != tg_id:
            continue
        if r["–°—Ç–∞—Ç—É—Å"] != "üå¥ –í –æ—Ç–ø—É—Å–∫–µ":
            continue
        # –ø–∞—Ä—Å–∏–º –ø–µ—Ä–∏–æ–¥ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ ¬´–ü—Ä–∏—á–∏–Ω–∞¬ª –∏–ª–∏ ¬´–ü–µ—Ä–∏–æ–¥¬ª
        try:
            start, end = parse_vacation(r["–ü—Ä–∏—á–∏–Ω–∞"])
        except:
            continue
        if start <= today <= end:
            return True
    return False

# ====== HANDLERS ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # –µ—Å–ª–∏ –∏–º—è –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
    if "name" not in context.user_data:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è: —É–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING
    # –∏–Ω–∞—á–µ —Å—Ä–∞–∑—É –≤ –º–µ–Ω—é
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    return CHOOSING

async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    text = update.message.text.strip()
    tg_id = update.effective_user.id
    context.user_data["name"] = text
    record_employee(text, tg_id)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏: {text}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=markup
    )
    return CHOOSING

async def choose_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    name = context.user_data["name"]
    
    if text == 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ':
        await update.message.reply_text("–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–¥–∞–ª—ë–Ω–Ω–æ?", reply_markup=ReplyKeyboardRemove())
        return REMOTE_REASON

    if text == 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö':
        await update.message.reply_text("–û–ø–∏—à–∏, —á—Ç–æ –∑–∞ —Å—ä—ë–º–∫–∏:", reply_markup=ReplyKeyboardRemove())
        return SHOOT_DETAIL

    if text == 'üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 01.07‚Äì09.07):", reply_markup=ReplyKeyboardRemove())
        return VACATION_DATES

    if text == 'DayOff':
        record_status(name, user_id, "DayOff", "", "")
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: DayOff", reply_markup=markup)
        return ConversationHandler.END

    if text == 'üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ':
        now = datetime.now().strftime("%H:%M")
        record_status(name, user_id, "üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ", "", now)
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–∂–µ –≤ –æ—Ñ–∏—Å–µ ({now})", reply_markup=markup)
        return ConversationHandler.END

    if text == 'üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
        # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ Status
        today = date.today().strftime("%d.%m.%Y")
        recs = status_ws.get_all_records()
        lines = []
        for r in recs:
            if r["–î–∞—Ç–∞"] != today:
                continue
            period = r["–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è"] or r["–ü–µ—Ä–∏–æ–¥"] or ""
            reason = r["–ü—Ä–∏—á–∏–Ω–∞"] or ""
            lines.append(f"{r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']} {f'({period})' if period else ''} {f'({reason})' if reason else ''}".strip())
        if not lines:
            msg = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏."
        else:
            msg = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(f"{i+1}. {line}" for i, line in enumerate(lines))
        await update.message.reply_text(msg, reply_markup=markup)
        return ConversationHandler.END

    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.", reply_markup=markup)
    return CHOOSING

async def save_remote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üè† –£–¥–∞–ª—ë–Ω–Ω–æ", reason, "")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–¥–∞–ª—ë–Ω–Ω–æ", reply_markup=markup)
    return ConversationHandler.END

async def save_shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detail = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö", detail, "")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –Ω–∞ —Å—ä—ë–º–∫–∞—Ö", reply_markup=markup)
    return ConversationHandler.END

async def save_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    period = update.message.text.strip()
    name = context.user_data["name"]
    tg_id = update.effective_user.id
    record_status(name, tg_id, "üå¥ –í –æ—Ç–ø—É—Å–∫–µ", period, "")
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –æ—Ç–ø—É—Å–∫ {period}", reply_markup=markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=markup)
    return ConversationHandler.END


# ====== –ï–ñ–ï–î–ù–ï–í–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ======

async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–í 9:30 –ø–æ –±—É–¥–Ω—è–º –ø—É—à–∏–º –≤—Å–µ–º, –∫—Ç–æ –µ—â—ë –Ω–µ –æ—Ç—á–∏—Ç–∞–ª—Å—è –∏ –Ω–µ –≤ –æ—Ç–ø—É—Å–∫–µ."""
    today = date.today().strftime("%d.%m.%Y")
    # 1) –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    emps = employees_ws.get_all_records()
    # 2) –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    recs = status_ws.get_all_records()
    done_ids = {int(r["Telegram ID"]) for r in recs if r["–î–∞—Ç–∞"] == today}
    for r in emps:
        tg_id = int(r["Telegram ID"])
        if tg_id in done_ids:
            continue
        if is_on_vacation(tg_id):
            continue
        try:
            await context.bot.send_message(
                chat_id=tg_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
                reply_markup=markup
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {tg_id}: {e}")


# ====== MAIN ======

def main():
    TOKEN = "<–í–ê–®_–¢–û–ö–ï–ù>"
    app = ApplicationBuilder().token(TOKEN).build()

    # ConversationHandler –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING:       [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_status)],
            REMOTE_REASON:  [MessageHandler(filters.TEXT & ~filters.COMMAND, save_remote)],
            SHOOT_DETAIL:   [MessageHandler(filters.TEXT & ~filters.COMMAND, save_shoot)],
            VACATION_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_vacation)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)

    # –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∂–æ–±
    remind_time = time(hour=9, minute=30)
    app.job_queue.run_daily(daily_reminder, remind_time, days=(0,1,2,3,4))

    app.run_polling()

if __name__ == "__main__":
    main()
