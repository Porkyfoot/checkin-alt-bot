# bot.py
import logging
from datetime import time, date
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# --- –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ ---
(
    STATE_NAME,
    STATE_STATUS,
    STATE_REMOTE_REASON,
    STATE_SHOOT_DETAILS,
    STATE_VACATION_DATES,
) = range(5)

# Google-—Å–±–æ—Ä—ã
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "/etc/secrets/credentials.json"
SPREADSHEET_ID = "–≤–∞—à-ID-—Ç–∞–±–ª–∏—Ü—ã"
EMPLOYEE_SHEET = "Employees"
STATUS_SHEET = "Status"

# Telegram
TOKEN = "–≤–∞—à-—Ç–æ–∫–µ–Ω"

# Keyboard
main_menu = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ"), KeyboardButton("üè† –£–¥–∞–ª—ë–Ω–Ω–æ")],
        [KeyboardButton("üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö"),    KeyboardButton("üå¥ –í –æ—Ç–ø—É—Å–∫–µ")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")],
    ],
    resize_keyboard=True,
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ Google
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)
    # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–æ–≤—ã–π ‚Äî —Å–ø—Ä–æ—Å–∏–º –∏–º—è
    rows = emp_ws.get_all_records()
    ids = [str(r["Telegram ID"]) for r in rows]
    if str(update.effective_user.id) not in ids:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å: –§–∞–º–∏–ª–∏—è –ò–º—è (—Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏).")
        return STATE_NAME

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", 
        reply_markup=main_menu
    )
    return STATE_STATUS


async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    emp_ws = client.open_by_key(SPREADSHEET_ID).worksheet(EMPLOYEE_SHEET)

    fullname = update.message.text.strip()
    emp_ws.append_row([fullname, str(update.effective_user.id)])
    await update.message.reply_text("–ó–∞–ø–∏—Å–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=main_menu)
    return STATE_STATUS


# ‚Äî‚Äî‚Äî –¢—É—Ç –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–∞ –∫–∞–∂–¥—ã–π —Å—Ç–∞—Ç—É—Å (—É–¥–∞–ª—ë–Ω–∫–∞, —Å—ä—ë–º–∫–∏, –æ—Ç–ø—É—Å–∫) ‚Äî‚Äî‚Äî
# –∫–∞–∂–¥—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –≤ –∫–æ–Ω—Ü–µ –¥–µ–ª–∞–µ—Ç STATE = ConversationHandler.END


async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
    client = gspread.authorize(creds)
    status_ws = client.open_by_key(SPREADSHEET_ID).worksheet(STATUS_SHEET)

    today = date.today().strftime("%d.%m.%Y")
    records = status_ws.get_all_records()
    lines = [r for r in records if r["–î–∞—Ç–∞"] == today]
    text = "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for i, r in enumerate(lines, 1):
        text += (
            f"{i}. {r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']} "
            f"({r['–ü—Ä–∏—á–∏–Ω–∞'] or r['–í—Ä–µ–º—è']})\n"
        )
    await update.message.reply_text(text)
    return ConversationHandler.END


def build_application():
    return (
        ApplicationBuilder()
        .token(TOKEN)
        .build()
    )


def main():
    app = build_application()

    # ConversationHandler
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            STATE_STATUS: [
                MessageHandler(filters.Regex("^üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ$"),      handle_office),
                MessageHandler(filters.Regex("^üè† –£–¥–∞–ª—ë–Ω–Ω–æ$"),        handle_remote),
                MessageHandler(filters.Regex("^üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö$"),      handle_shoot),
                MessageHandler(filters.Regex("^üå¥ –í –æ—Ç–ø—É—Å–∫–µ$"),       handle_vacation),
                MessageHandler(filters.Regex("^üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤$"), show_list),
            ],
            # –∏ –¥–∞–ª–µ–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π...
        },
        fallbacks=[CommandHandler("start", start)],
    )
    app.add_handler(conv)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    remind_time = time(hour=9, minute=30)
    app.job_queue.run_daily(send_reminder, remind_time, days=(0,1,2,3,4))

    app.run_polling()


if __name__ == "__main__":
    main()
