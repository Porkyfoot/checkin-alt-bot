import logging
from datetime import datetime, time, date
import re

import gspread
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò GOOGLE SHEETS ======
# JSON-–∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –ø—É—Ç–∏ /etc/secrets/credentials.json
gc = gspread.service_account(filename="/etc/secrets/credentials.json")
SPREADSHEET = "checkin-alt-bot"  # –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
EMP_SHEET = "Employees"
STAT_SHEET = "Status"

# –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç—ã
employees_ws = gc.open(SPREADSHEET).worksheet(EMP_SHEET)
status_ws    = gc.open(SPREADSHEET).worksheet(STAT_SHEET)

# ====== –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ======
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# ====== –°–¢–ï–ô–¢–´ ======
(
    ASK_NAME,
    CHOOSING,
    REMOTE_REASON,
    SHOOT_DETAIL,
    VACATION_DATES,
    DELAY_TIME,
    DELAY_REASON
) = range(7)

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–ê ======
menu = [
    ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ'],
    ['üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö',    'üå¥ –í –æ—Ç–ø—É—Å–∫–µ'],
    ['‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å', 'DayOff'],
    ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤']
]
markup = ReplyKeyboardMarkup(menu, one_time_keyboard=True, resize_keyboard=True)

# ====== UTILS SHEETS ======

def record_employee(name: str, tg_id: int):
    recs = employees_ws.get_all_records()
    ids = {int(r['Telegram ID']) for r in recs}
    if tg_id not in ids:
        employees_ws.append_row([name, tg_id])


def record_status(name: str, tg_id: int, status: str, period: str, reason: str):
    today = date.today().strftime('%d.%m.%Y')
    status_ws.append_row([today, name, tg_id, status, period, reason])

# ====== PARSERS ======

def parse_vacation(text: str):
    parts = re.split(r"[‚Äì-]", text.strip())
    def to_date(s):
        for fmt in ('%d.%m.%Y','%d.%m'):
            try:
                d = datetime.strptime(s.strip(), fmt)
                if fmt=='%d.%m': d = d.replace(year=date.today().year)
                return d.date()
            except: pass
        raise
    return to_date(parts[0]), to_date(parts[1])

# ====== REMINDER HELP ======

def is_on_vacation(tg_id: int):
    today = date.today()
    for r in status_ws.get_all_records():
        if int(r['Telegram ID'])!=tg_id or r['–°—Ç–∞—Ç—É—Å']!='üå¥ –í –æ—Ç–ø—É—Å–∫–µ': continue
        try:
            start,end = parse_vacation(r['–ü–µ—Ä–∏–æ–¥'])
            if start<=today<=end: return True
        except: pass
    return False

# ====== HANDLERS ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if 'name' not in context.user_data:
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è: —É–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º.',
            reply_markup=ReplyKeyboardRemove()
        )
        return ASK_NAME
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:', reply_markup=markup)
    return CHOOSING

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    tg_id = update.effective_user.id
    context.user_data['name']=name
    record_employee(name, tg_id)
    await update.message.reply_text(f'‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏: {name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:', reply_markup=markup)
    return CHOOSING

async def choose_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    name = context.user_data['name']
    tg_id = update.effective_user.id
    if text=='üè† –£–¥–∞–ª—ë–Ω–Ω–æ':
        await update.message.reply_text('–ü—Ä–∏—á–∏–Ω–∞ —É–¥–∞–ª—ë–Ω–∫–∏?', reply_markup=ReplyKeyboardRemove())
        return REMOTE_REASON
    if text=='üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö':
        await update.message.reply_text('–î–µ—Ç–∞–ª–∏ —Å—ä—ë–º–∫–∏ (–∫–ª–∏–µ–Ω—Ç)?', reply_markup=ReplyKeyboardRemove())
        return SHOOT_DETAIL
    if text=='üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        await update.message.reply_text('–î–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ (–ø—Ä–∏–º–µ—Ä 01.07‚Äì09.07)?', reply_markup=ReplyKeyboardRemove())
        return VACATION_DATES
    if text=='‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å':
        await update.message.reply_text('–í–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—à—å –Ω–∞ —Ä–∞–±–æ—Ç–µ?', reply_markup=ReplyKeyboardRemove())
        return DELAY_TIME
    if text=='DayOff':
        record_status(name, tg_id, 'DayOff', '', '')
        await update.message.reply_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: DayOff', reply_markup=markup)
        return ConversationHandler.END
    if text=='üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ':
        now=datetime.now().strftime('%H:%M')
        record_status(name, tg_id, 'üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', now, '')
        await update.message.reply_text(f'‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –æ—Ñ–∏—Å ({now})', reply_markup=markup)
        return ConversationHandler.END
    if text=='üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
        today=date.today().strftime('%d.%m.%Y')
        recs=status_ws.get_all_records()
        lines=[]
        for r in recs:
            if r['–î–∞—Ç–∞']!=today: continue
            period=r['–ü–µ—Ä–∏–æ–¥'] or r['–í—Ä–µ–º—è'] or ''
            reason=r['–ü—Ä–∏—á–∏–Ω–∞'] or ''
            lines.append(f"{r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']}" +
                         (f" ({period})" if period else '') +
                         (f" ({reason})" if reason else ''))
        msg='–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n'+"\n".join(f"{i+1}. {l}" for i,l in enumerate(lines)) if lines else '–ù–µ—Ç –æ—Ç–º–µ—Ç–æ–∫.'
        await update.message.reply_text(msg, reply_markup=markup)
        return ConversationHandler.END
    await update.message.reply_text('–í—ã–±–µ—Ä–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.', reply_markup=markup)
    return CHOOSING

async def save_remote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason=update.message.text.strip()
    name=context.user_data['name']; tg_id=update.effective_user.id
    record_status(name, tg_id, 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ', '', reason)
    await update.message.reply_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–¥–∞–ª—ë–Ω–Ω–æ', reply_markup=markup)
    return ConversationHandler.END

async def save_shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detail=update.message.text.strip()
    name=context.user_data['name']; tg_id=update.effective_user.id
    record_status(name, tg_id, 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö', '', detail)
    await update.message.reply_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —Å—ä—ë–º–∫–∏', reply_markup=markup)
    return ConversationHandler.END

async def save_vacation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    period=update.message.text.strip()
    name=context.user_data['name']; tg_id=update.effective_user.id
    record_status(name, tg_id, 'üå¥ –í –æ—Ç–ø—É—Å–∫–µ', period, '')
    await update.message.reply_text(f'‚úÖ –û—Ç–ø—É—Å–∫ {period}', reply_markup=markup)
    return ConversationHandler.END

async def save_delay_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t=update.message.text.strip()
    context.user_data['delay_time']=t
    await update.message.reply_text('–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∏?', reply_markup=ReplyKeyboardRemove())
    return DELAY_REASON

async def save_delay_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reason=update.message.text.strip()
    name=context.user_data['name']; tg_id=update.effective_user.id
    t=context.user_data.get('delay_time','')
    record_status(name, tg_id, '‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å', t, reason)
    await update.message.reply_text('‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –∑–∞–¥–µ—Ä–∂–∫–∞', reply_markup=markup)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup)
    return ConversationHandler.END

# ====== –ï–ñ–ï–î–ù–ï–í–ù–´–ô REMINDER ======
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    today=date.today().strftime('%d.%m.%Y')
    emps=employees_ws.get_all_records()
    recs=status_ws.get_all_records()
    done={int(r['Telegram ID']) for r in recs if r['–î–∞—Ç–∞']==today}
    for r in emps:
        tg=int(r['Telegram ID'])
        if tg in done or is_on_vacation(tg): continue
        try:
            await context.bot.send_message(chat_id=tg, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:', reply_markup=markup)
        except Exception as e:
            logging.error(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –¥–æ—à–ª–æ {tg}: {e}')

# ====== MAIN ======

def main():
    TOKEN = '<–í–ê–®_–¢–û–ö–ï–ù>'
    app = ApplicationBuilder().token(TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_NAME:       [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            CHOOSING:       [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_status)],
            REMOTE_REASON:  [MessageHandler(filters.TEXT & ~filters.COMMAND, save_remote)],
            SHOOT_DETAIL:   [MessageHandler(filters.TEXT & ~filters.COMMAND, save_shoot)],
            VACATION_DATES:[MessageHandler(filters.TEXT & ~filters.COMMAND, save_vacation)],
            DELAY_TIME:     [MessageHandler(filters.TEXT & ~filters.COMMAND, save_delay_time)],
            DELAY_REASON:   [MessageHandler(filters.TEXT & ~filters.COMMAND, save_delay_reason)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(conv)
    remind = time(hour=9, minute=30)
    app.job_queue.run_daily(daily_reminder, remind, days=(0,1,2,3,4))
    app.run_polling()

if __name__=='__main__': main()
