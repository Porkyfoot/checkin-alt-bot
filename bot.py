#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import re
from datetime import datetime, date, time

import gspread
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ==== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ====
TOKEN = os.environ["TOKEN"]
SPREADSHEET_ID = os.environ["SPREADSHEET_ID"]
CREDS_PATH = "/etc/secrets/credentials.json"  # –ø—É—Ç—å –∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∫–ª—é—á—É –≤ Render

# ==== GOOGLE SHEETS ====
gc = gspread.service_account(filename=CREDS_PATH)
EMP_SHEET = "Employees"
STAT_SHEET = "Status"
employees_ws = gc.open_by_key(SPREADSHEET_ID).worksheet(EMP_SHEET)
status_ws    = gc.open_by_key(SPREADSHEET_ID).worksheet(STAT_SHEET)

# ==== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# ==== STATES ====
CHOOSING, REMOTE_REASON, SHOOT_DETAIL, VACATION_DATES = range(4)

# ==== KEYBOARD ====
main_keyboard = [
    ['üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ', 'üè† –£–¥–∞–ª—ë–Ω–Ω–æ'],
    ['üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö',    'üå¥ –í –æ—Ç–ø—É—Å–∫–µ'],
    ['üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', 'üõå DayOff']
]
markup = ReplyKeyboardMarkup(main_keyboard, one_time_keyboard=True, resize_keyboard=True)

# ==== HELPERS ====

def record_employee(name: str, tg_id: int):
    recs = employees_ws.get_all_records()
    ids = {int(r["Telegram ID"]) for r in recs}
    if tg_id not in ids:
        employees_ws.append_row([name, tg_id])

def record_status(name: str, tg_id: int, status: str, detail: str, period: str):
    today = date.today().strftime("%d.%m.%Y")
    status_ws.append_row([today, name, tg_id, status, detail, period])

def parse_vacation(text: str):
    parts = re.split(r"[‚Äì-]", text.strip())
    def to_date(s):
        for fmt in ("%d.%m.%Y","%d.%m"):
            try:
                d = datetime.strptime(s.strip(), fmt)
                if fmt=="%d.%m":
                    d = d.replace(year=date.today().year)
                return d.date()
            except ValueError:
                continue
        raise ValueError(f"–Ω–µ –∑–Ω–∞—é —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã {s}")
    return to_date(parts[0]), to_date(parts[1])

def is_on_vacation(tg_id: int):
    today = date.today()
    recs = status_ws.get_all_records()
    for r in recs:
        if int(r["Telegram ID"])!=tg_id or r["–°—Ç–∞—Ç—É—Å"]!="üå¥ –í –æ—Ç–ø—É—Å–∫–µ":
            continue
        try:
            start,end = parse_vacation(r["–ü–µ—Ä–∏–æ–¥"] or r["–î–µ—Ç–∞–ª–∏"])
        except:
            continue
        if start<=today<=end:
            return True
    return False

# ==== HANDLERS ====

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏
    if "name" not in ctx.user_data:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è):",
            reply_markup=ReplyKeyboardRemove()
        )
        return CHOOSING
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    return CHOOSING

async def name_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    tg_id = update.effective_user.id
    ctx.user_data["name"] = name
    record_employee(name, tg_id)
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–∏: {name}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)
    return CHOOSING

async def choose_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    name = ctx.user_data.get("name")
    if not name:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤–¥—Ä—É–≥ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –∏–º–µ–Ω–∏
        return await name_handler(update, ctx)

    if text=='üè† –£–¥–∞–ª—ë–Ω–Ω–æ':
        await update.message.reply_text("–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω–æ?", reply_markup=ReplyKeyboardRemove())
        return REMOTE_REASON

    if text=='üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö':
        await update.message.reply_text("–û–ø–∏—à–∏, —á—Ç–æ –∑–∞ —Å—ä—ë–º–∫–∏ (–∫–ª–∏–µ–Ω—Ç/–¥–µ—Ç–∞–ª–∏):", reply_markup=ReplyKeyboardRemove())
        return SHOOT_DETAIL

    if text=='üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        await update.message.reply_text("–£–∫–∞–∂–∏ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 01.07‚Äì09.07):", reply_markup=ReplyKeyboardRemove())
        return VACATION_DATES

    if text=='üõå DayOff':
        record_status(name, user.id, "üõå DayOff", "", "")
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: DayOff", reply_markup=markup)
        return ConversationHandler.END

    if text=='üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ':
        now = datetime.now().strftime("%H:%M")
        record_status(name, user.id, "üè¢ –£–∂–µ –≤ –æ—Ñ–∏—Å–µ", now, "")
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–∂–µ –≤ –æ—Ñ–∏—Å–µ ({now})", reply_markup=markup)
        return ConversationHandler.END

    if text=='üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤':
        today = date.today().strftime("%d.%m.%Y")
        recs = status_ws.get_all_records()
        lines = []
        for r in recs:
            if r["–î–∞—Ç–∞"]!=today:
                continue
            det = r["–î–µ—Ç–∞–ª–∏"] or ""
            per = r["–ü–µ—Ä–∏–æ–¥"] or ""
            lines.append(
                f"{r['–ò–º—è']} ‚Äî {r['–°—Ç–∞—Ç—É—Å']}" +
                (f" ({det})" if det else "") +
                (f" [{per}]" if per else "")
            )
        msg = "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Ç–º–µ—Ç–æ–∫." if not lines else "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n" + "\n".join(f"{i+1}. {l}" for i,l in enumerate(lines))
        await update.message.reply_text(msg, reply_markup=markup)
        return ConversationHandler.END

    # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.", reply_markup=markup)
    return CHOOSING

async def save_remote(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    reason = update.message.text.strip()
    name = ctx.user_data["name"]
    record_status(name, update.effective_user.id, "üè† –£–¥–∞–ª—ë–Ω–Ω–æ", reason, "")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: —É–¥–∞–ª—ë–Ω–Ω–æ", reply_markup=markup)
    return ConversationHandler.END

async def save_shoot(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    detail = update.message.text.strip()
    name = ctx.user_data["name"]
    record_status(name, update.effective_user.id, "üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö", detail, "")
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –Ω–∞ —Å—ä—ë–º–∫–∞—Ö", reply_markup=markup)
    return ConversationHandler.END

async def save_vacation(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    period = update.message.text.strip()
    name = ctx.user_data["name"]
    record_status(name, update.effective_user.id, "üå¥ –í –æ—Ç–ø—É—Å–∫–µ", "", period)
    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: –æ—Ç–ø—É—Å–∫ {period}", reply_markup=markup)
    return ConversationHandler.END

async def cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=markup)
    return ConversationHandler.END

async def daily_reminder(ctx: ContextTypes.DEFAULT_TYPE):
    today = date.today().strftime("%d.%m.%Y")
    emps = employees_ws.get_all_records()
    recs = status_ws.get_all_records()
    done = {int(r["Telegram ID"]) for r in recs if r["–î–∞—Ç–∞"]==today}
    for r in emps:
        tg = int(r["Telegram ID"])
        if tg in done or is_on_vacation(tg):
            continue
        try:
            await ctx.bot.send_message(chat_id=tg, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–µ –º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å {tg}: {e}")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING:       [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_status)],
            REMOTE_REASON:  [MessageHandler(filters.TEXT & ~filters.COMMAND, save_remote)],
            SHOOT_DETAIL:   [MessageHandler(filters.TEXT & ~filters.COMMAND, save_shoot)],
            VACATION_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_vacation)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv)

    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∂–æ–± –≤ 9:30 –ø–Ω‚Äì–ø—Ç
    remind_time = time(hour=9, minute=30)
    app.job_queue.run_daily(daily_reminder, remind_time, days=(0,1,2,3,4))

    app.run_polling()

if __name__ == "__main__":
    main()
