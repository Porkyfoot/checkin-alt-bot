# -*- coding: utf-8 -*-
import os
import logging
from datetime import datetime, time, date, timedelta
import re
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler ---
CHOOSE, REMOTE_REASON, VACATION_DATES, SHOOT_DETAILS, DELAY_TIME, DELAY_REASON = range(6)

# --- –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ ---
MENU = [
    ['‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å', 'üõå DayOff'],
    ['üå¥ –í –æ—Ç–ø—É—Å–∫–µ', 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö'],
    ['üè¢ –£–¥–∞–ª–µ–Ω–Ω–æ']
]

def connect_sheet():
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds_json = os.environ['GOOGLE_CREDENTIALS_JSON']
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
    client = gspread.authorize(creds)
    sh = client.open(os.environ['SPREADSHEET_NAME'])
    ws = sh.worksheet(os.environ['SHEET_NAME'])
    return ws

def record_status(ws, update: Update, status, details, reason):
    now = datetime.now().strftime('%d.%m.%Y')
    user = update.effective_user
    row = [now, user.full_name, user.id, status, details or '', reason or '']
    ws.append_row(row)

# --- –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ ---
def start(update: Update, context):
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:',
        reply_markup=ReplyKeyboardMarkup(MENU, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSE

# --- –≤—ã–±–æ—Ä –æ–ø—Ü–∏–∏ ---
def choose(update: Update, context):
    text = update.message.text
    context.user_data['status'] = text
    if text == '‚è∞ –ó–∞–¥–µ—Ä–∂–∏–≤–∞—é—Å—å':
        update.message.reply_text('–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—à—å –Ω–∞ —Ä–∞–±–æ—Ç–µ? –ù–∞–ø—Ä–∏–º–µ—Ä, 09:30', reply_markup=ReplyKeyboardRemove())
        return DELAY_TIME
    if text == 'üè¢ –£–¥–∞–ª–µ–Ω–Ω–æ':
        update.message.reply_text('–ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—à—å —É–¥–∞–ª–µ–Ω–Ω–æ?', reply_markup=ReplyKeyboardRemove())
        return REMOTE_REASON
    if text == 'üå¥ –í –æ—Ç–ø—É—Å–∫–µ':
        update.message.reply_text('–£–∫–∞–∂–∏ –¥–∞—Ç—ã –æ—Ç–ø—É—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM‚ÄìDD.MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 07.09‚Äì12.09', reply_markup=ReplyKeyboardRemove())
        return VACATION_DATES
    if text == 'üé® –ù–∞ —Å—ä—ë–º–∫–∞—Ö':
        update.message.reply_text('–ß—Ç–æ –∑–∞ —Å—ä—ë–º–∫–∏? –£–∫–∞–∂–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–µ—Ç–∞–ª–∏.', reply_markup=ReplyKeyboardRemove())
        return SHOOT_DETAILS
    # DayOff
    if text == 'üõå DayOff':
        ws = connect_sheet()
        record_status(ws, update, text, '', '')
        update.message.reply_text('–ó–∞–ø–∏—Å–∞–ª DayOff.', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏: –≤—Ä–µ–º—è –∏ –ø—Ä–∏—á–∏–Ω–∞ ---
def delay_time(update: Update, context):
    context.user_data['details'] = update.message.text
    update.message.reply_text('–£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –∑–∞–¥–µ—Ä–∂–∫–∏.')
    return DELAY_REASON

def delay_reason(update: Update, context):
    reason = update.message.text
    ws = connect_sheet()
    record_status(ws, update, context.user_data['status'], context.user_data['details'], reason)
    update.message.reply_text('–ó–∞–ø–∏—Å–∞–ª –∑–∞–¥–µ—Ä–∂–∫—É.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- —É–¥–∞–ª–µ–Ω–Ω–æ ---
def remote_reason(update: Update, context):
    reason = update.message.text
    ws = connect_sheet()
    record_status(ws, update, context.user_data['status'], '', reason)
    update.message.reply_text('–ó–∞–ø–∏—Å–∞–ª —Ä–∞–±–æ—Ç—É —É–¥–∞–ª–µ–Ω–Ω–æ.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –æ—Ç–ø—É—Å–∫ ---
def vacation_dates(update: Update, context):
    text = update.message.text.strip()
    if not re.match(r'\d{2}\.\d{2}‚Äì\d{2}\.\d{2}', text):
        update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π DD.MM‚ÄìDD.MM')
        return VACATION_DATES
    context.user_data['details'] = text
    ws = connect_sheet()
    record_status(ws, update, context.user_data['status'], text, '')
    update.message.reply_text('–ó–∞–ø–∏—Å–∞–ª –æ—Ç–ø—É—Å–∫.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- —Å—ä—ë–º–∫–∏ ---
def shoot_details(update: Update, context):
    text = update.message.text
    ws = connect_sheet()
    record_status(ws, update, context.user_data['status'], text, '')
    update.message.reply_text('–ó–∞–ø–∏—Å–∞–ª —Å—ä—ë–º–∫–∏.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ---
def list_today(update: Update, context):
    ws = connect_sheet()
    rows = ws.get_all_records()
    today = datetime.now().strftime('%d.%m.%Y')
    lines = []
    for r in rows:
        if r['–î–∞—Ç–∞'] == today:
            parts = [r['–°—Ç–∞—Ç—É—Å']]
            det = r['–î–µ—Ç–∞–ª–∏']
            rea = r['–ü—Ä–∏—á–∏–Ω–∞']
            extras = []
            if det: extras.append(det)
            if rea: extras.append(rea)
            if extras:
                parts.append('(' + '; '.join(extras) + ')')
            lines.append(f"{r['–ò–º—è']} ‚Äî {' '.join(parts)}")
    if not lines:
        reply = '–°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª —Å—Ç–∞—Ç—É—Å—ã.'
    else:
        reply = '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è:\n' + '\n'.join(f"{i+1}. {l}" for i,l in enumerate(lines))
    update.message.reply_text(reply)

# --- main ---
def main():
    app = ApplicationBuilder().token(os.environ['TELEGRAM_TOKEN']).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose)],
            DELAY_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, delay_time)],
            DELAY_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, delay_reason)],
            REMOTE_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, remote_reason)],
            VACATION_DATES: [MessageHandler(filters.TEXT & ~filters.COMMAND, vacation_dates)],
            SHOOT_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, shoot_details)],
        },
        fallbacks=[CommandHandler('cancel', lambda u,c: (u.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove()), ConversationHandler.END)[1])]
    )
    app.add_handler(conv)
    app.add_handler(CommandHandler('list', list_today))
    # –∑–∞–ø—É—Å–∫
    app.run_polling()

if __name__ == '__main__':
    main()
